import contextlib
import os
from datetime import datetime

from langgraph.checkpoint.postgres import PostgresSaver
from langgraph.prebuilt import create_react_agent

from src.graph import AgentState
from src.tools import (
    generate_insights,
    pick_aoi,
    pick_dataset,
    pull_data,
)
from src.utils.llms import SONNET

prompt = f"""You are a geospatial agent that has access to tools and user provided selections to help answer user queries. First, think through the problem step-by-step by planning what tools you need to use and in what order. Then execute your plan by using the tools one by one to answer the user's question.

Tools:
- pick-aoi: Pick the best area of interest (AOI) based on a place name and user's question.
- pick-dataset: Find the most relevant datasets to help answer the user's question.
- pull-data: Pulls data for the selected AOI and dataset in the specified date range.
- generate-insights: Analyzes raw data and generates 1-2 compelling chart insights with Recharts-compatible data.

Workflow:
1. Use pick-aoi, pick-dataset, and pull-data to get the data in the specified date range.
2. Use generate-insights to analyze the data and create 1-2 compelling visualizations.

When you see UI action messages:
1. Acknowledge the user's selection: "I see you've selected [item name]"
2. Check if you have all needed components (AOI + dataset + date range) before proceeding
3. Use tools only for missing components
4. If user asks to change selections, override UI selections

Notes:
- You ALWAYS need an AOI, dataset, and date range to perform any analysis, when unclear about the user's question, ask for clarification - don't make assumptions.
- If the dataset is not available or you are not able to pull data, politely inform the user & STOP - don't do any more steps further. 
- For pick-aoi tool, use subregion parameter ONLY when the user wants to filter results by a specific administrative level (e.g., "counties in Florida", "districts in Kerala", "KBAs in Brazil"). Do NOT use subregion for geographic hierarchies like "San Francisco, California" - here San Francisco is the target location and California provides context.
- Don't interpret the insights generated by generate-insights tool - just report the insights as-is. 
- Current date is {datetime.now().strftime('%Y-%m-%d')}. Use this for relative time queries like "past 3 months", "last week", etc.
"""

tools = [
    pick_aoi,
    pick_dataset,
    pull_data,
    generate_insights,
]

DATABASE_URL = os.environ["DATABASE_URL"].replace(
    "postgresql+psycopg://", "postgresql://"
)


@contextlib.contextmanager
def persistent_checkpointer():
    with PostgresSaver.from_conn_string(DATABASE_URL) as checkpointer:
        # Note: no need to run `checkpointer.setup()` here, since I've
        # converted the checkpointer setup into Alembic migrations so
        # that Alembic can manage the database schema. Note that if we
        # update the postgres checkpointer library it may require a new
        # migration to be created - I manually ran `checkpointer.setup()`
        # on a local database and then ran
        # `alembic revision --autogenerate -m "Add langgraph persistence tables"`
        # to create the migration script (note that the desired migration
        # scripts were created in the opposite methods (upgrade vs downgrade)
        # than the ones expected, since, technically alembic would need to
        # drop the tables in order to get the state to match the local
        # codebase. I just copy/pasted the code from the `upgrade` method
        # to the `downgrade` method).

        # checkpointer.setup()

        yield checkpointer


# Open the context manager at the module level and keep it open
checkpointer_cm = persistent_checkpointer()
checkpointer = checkpointer_cm.__enter__()

zeno = create_react_agent(
    model=SONNET,
    tools=tools,
    state_schema=AgentState,
    prompt=prompt,
    checkpointer=checkpointer,
)
